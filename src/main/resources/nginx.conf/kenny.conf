
server {
        listen       89;
        server_name  localhost;

        location / {
         # Serve content from the 'html' directory for requests to '/'
         root html;
         index kenny.html index.htm; # Look for these index files
        }
    }
server {
    listen 90;
    server_name localhost;

    # Allow requests from any origin
    add_header 'Access-Control-Allow-Origin' *;

    # Allow requests with credentials (e.g., cookies)
    add_header 'Access-Control-Allow-Credentials' 'true';

    # Allow request methods such as GET/POST/PUT/DELETE
    add_header 'Access-Control-Allow-Methods' *;

    # Allow request headers
    add_header 'Access-Control-Allow-Headers' *;

    # Validate the referrer site
    valid_referers *.kenny.com;

    # If an invalid referrer is detected, proceed with the following evaluation
    if ($invalid_referer) {
        return 404;
    }

    location / {
        # Serve content from the '/home/foodie-shop' directory for requests to '/'
        root /home/foodie-shop;
        index index.html; # Look for this index file
    }

    location /kenny {
        # Serve content from the '/home' directory for requests to '/kenny'
        root /home;
    }

    location /static {
        # Alias '/static' requests to the '/home/kenny' directory
        alias /home/kenny;
        expires 10s;
        # expires @22h33m;
        # expires -1h;
        # expires epoch;
        # expires off;
        # expires max;
    }

;     expires 10s;:
;     This parameter sets the expiration time for the resource to 10 seconds after the response is received by the client. After 10 seconds, the client will consider the cached resource stale and request a fresh copy from the server.
;     expires @22h33m;:
;     This parameter sets the expiration time for the resource to a specific date and time. In this case, it sets the expiration time to 22 hours and 33 minutes after the response is received.
;     expires -1h;:
;     This parameter sets the expiration time to one hour ago, effectively instructing the client to consider the resource stale immediately.
;     expires epoch;:
;     Setting the expiration time to epoch means that the resource is already considered expired. The client will not cache the resource and will always request a fresh copy from the server.
;     expires off;:
;     This parameter disables caching for the resource. The client will not cache the resource, and each request will result in a fresh copy being retrieved from the server.
;     expires max;:
;     Setting the expiration time to max instructs the client to cache the resource indefinitely. The client will not check back with the server for updates until the resource is accessed again after a browser restart or cache clearance.
}

server {
    listen 91;
    server_name localhost;

    location = / {
        # Serve content from the '/home/foodie-shop' directory for requests to '/'
        root /home/foodie-shop;
        index index.html; # Look for this index file
    }

    location = /kenny/img/img1.png {
        # Serve content from the '/home' directory for requests specifically to '/kenny/img/img1.png'
        root /home;
    }
}

server {
    listen 92;
    server_name localhost;
    # This modifier indicates a case-insensitive regular expression match.
    location ~* \.(GIF|png|bmp|jpg|jpeg) {
        # Serve content from the '/home' directory for requests to image files
        root /home;
    }
}

server {
        listen       93;
        server_name  localhost;
        # ^~: This modifier indicates a non-regex match.
        # It means that if a request matches this location,
        # Nginx will stop looking for more specific matches and use this block
        location ^~ /kenny/img {
            root   /home;
        }

    }

# Define an upstream block named 'tomcats' with a single server at 192.168.74.128:8080
upstream tomcats {
    # ip_hash;
    # hash $request_uri;
    # least_conn;
;     server {ip addr} weight=1;
;     server {ip addr} max_conns=2;
;     server {ip addr} weight=3;
    server XXXXIP;
}

proxy_cache_path /usr/local/nginx/upstream_cache keys_zone=mycache:5m max_size=1g inactive=30s use_temp_path=off;
# /usr/local/nginx/upstream_cache:
# This parameter specifies the path where Nginx will store the cached data. In this case, cached content will be stored in the /usr/local/nginx/upstream_cache directory.
# keys_zone=mycache:5m:
# keys_zone=mycache defines the name of the cache zone. In this case, the cache zone is named mycache.
# 5m specifies the size of the shared memory zone that will store cache keys and metadata for the mycache zone. Here, 5m indicates 5 megabytes of shared memory.
# max_size=1g:
# max_size=1g sets the maximum size of the cache zone. In this case, the maximum size is set to 1 gigabyte (1g). Nginx will not store more data than this size in the cache zone.
# inactive=30s:
# inactive=30s specifies the time period after which cached items are considered inactive and can be removed from the cache. In this case, items that have not been accessed for 30 seconds will be considered for removal.
# use_temp_path=off:
# use_temp_path=off indicates that temporary files created during caching will not be stored in the default temporary directory. Instead, they will be stored in the same directory specified by the proxy_cache_path.


# Create a server block listening on port 80 with the server_name set to 'wwww.tomcats.com'
server {
    listen       80;
    server_name  www.tomcats.com;

    proxy_cache mycache;

    proxy_cache_valid   200 304 8h;

    # Handle requests to the root location '/'
    location / {
        # Proxy incoming requests to the 'tomcats' upstream defined above
        proxy_pass http://tomcats;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
}